/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.farragofiction.ideaplugin.wordlist;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.farragofiction.ideaplugin.wordlist.psi.WordListTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>WordList.flex</tt>
 */
class WordListLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BODY = 2;
  public static final int BODY_VALUE = 4;
  public static final int LISTBODY_VALUE = 6;
  public static final int SUBLISTBODY_VALUE = 8;
  public static final int INCLUDE = 10;
  public static final int DEFAULT = 12;
  public static final int LISTINCLUDE = 14;
  public static final int LISTDEFAULT = 16;
  public static final int LISTBODY = 18;
  public static final int LISTITEM = 20;
  public static final int SUBLISTBODY = 22;
  public static final int SUBLIST = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\25\1\21\1\20\1\26\1\22\22\0\1\11\16\0\1\27\12\0\1\30\4\0\1\24\1\23"+
    "\4\0\1\5\6\0\1\16\7\0\1\1\2\0\1\12\4\0\1\31\7\0\1\15\1\2\1\0\1\7\1\0\1\10"+
    "\4\0\1\6\1\13\2\0\1\14\1\17\1\4\3\0\1\3\14\0\1\20\242\0\2\20\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\2\1\1\2\1\3\1\2\1\4\1\5\1\1"+
    "\1\6\1\7\1\6\2\7\1\10\1\11\1\10\2\11"+
    "\1\12\1\13\1\12\2\13\1\1\1\0\1\1\1\0"+
    "\1\14\2\15\1\16\1\17\1\1\1\0\1\1\1\2"+
    "\2\1\1\16\1\20\1\21\1\0\1\22\1\3\2\16"+
    "\2\23\1\24\1\25\1\14\1\17\1\26\1\0\1\27"+
    "\2\30\3\0\1\31\17\0\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"+
    "\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u016c\0\u0186"+
    "\0\u01a0\0\u01ba\0\u0152\0\u0152\0\u01d4\0\u01ee\0\u0208\0\u0222"+
    "\0\u01a0\0\u023c\0\u0256\0\u0270\0\u028a\0\u02a4\0\u02be\0\u02d8"+
    "\0\u02f2\0\u030c\0\u0326\0\u0340\0\u035a\0\u035a\0\u0374\0\u0374"+
    "\0\u038e\0\u03a8\0\u03c2\0\u03dc\0\u03f6\0\u0410\0\u0410\0\u042a"+
    "\0\u0444\0\u045e\0\u0478\0\u0492\0\u0152\0\u0152\0\u04ac\0\u04c6"+
    "\0\u0222\0\u028a\0\u02a4\0\u030c\0\u0326\0\u035a\0\u0374\0\u0152"+
    "\0\u0152\0\u0410\0\u04e0\0\u04fa\0\u0478\0\u0492\0\u0514\0\u052e"+
    "\0\u0548\0\u0152\0\u0562\0\u057c\0\u0596\0\u05b0\0\u05ca\0\u05e4"+
    "\0\u05fe\0\u0618\0\u0632\0\u064c\0\u0666\0\u0680\0\u069a\0\u06b4"+
    "\0\u06ce\0\u0152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\16\16\3\0\3\16\1\0\3\16\11\20"+
    "\1\21\6\20\1\22\1\21\1\22\1\23\1\24\2\21"+
    "\1\25\2\16\11\26\1\27\6\26\1\30\1\31\1\30"+
    "\2\16\1\32\1\31\3\16\11\33\1\34\6\33\1\35"+
    "\1\36\1\35\2\16\1\37\1\36\3\16\11\40\1\41"+
    "\6\40\1\42\1\43\1\42\2\16\1\44\1\43\3\16"+
    "\20\45\1\46\1\0\1\46\3\16\1\0\3\16\20\47"+
    "\1\50\1\0\1\50\3\16\1\0\1\16\1\51\1\16"+
    "\11\52\1\16\6\52\1\53\1\54\1\53\3\16\1\54"+
    "\1\16\1\55\1\16\20\56\1\57\1\0\1\57\3\16"+
    "\1\0\1\16\1\55\1\16\11\20\1\60\6\20\1\61"+
    "\1\54\1\61\3\16\1\54\1\62\2\16\20\63\1\64"+
    "\1\54\1\64\1\65\1\66\1\16\1\54\1\62\1\55"+
    "\1\16\11\20\1\16\7\20\1\0\1\20\3\16\1\0"+
    "\23\16\3\0\3\16\1\0\3\16\34\0\1\67\27\0"+
    "\11\20\1\0\7\20\1\0\1\20\20\0\1\21\6\0"+
    "\3\21\2\0\2\21\3\0\11\20\1\21\6\20\1\22"+
    "\1\21\1\22\2\0\2\21\32\0\1\70\2\0\21\26"+
    "\1\0\3\26\5\0\11\26\1\27\7\26\1\32\3\26"+
    "\2\32\3\0\11\26\1\71\6\26\1\71\1\21\1\71"+
    "\2\26\2\21\14\0\1\32\7\0\1\32\3\0\2\32"+
    "\3\0\21\33\1\0\3\33\5\0\11\33\1\34\7\33"+
    "\1\37\3\33\2\37\3\0\11\33\1\72\6\33\1\72"+
    "\1\73\1\72\2\33\2\73\14\0\1\73\6\0\3\73"+
    "\2\0\2\73\14\0\1\37\7\0\1\37\3\0\2\37"+
    "\3\0\21\40\1\0\3\40\5\0\11\40\1\41\7\40"+
    "\1\44\3\40\2\44\3\0\11\40\1\74\6\40\1\74"+
    "\1\75\1\74\2\40\2\75\14\0\1\75\6\0\3\75"+
    "\2\0\2\75\14\0\1\44\7\0\1\44\3\0\2\44"+
    "\3\0\21\76\1\0\3\76\5\0\21\77\1\0\3\77"+
    "\16\0\1\100\20\0\11\52\1\0\7\52\1\0\1\52"+
    "\7\0\11\52\1\0\6\52\1\53\1\54\1\53\3\0"+
    "\1\54\23\0\3\54\3\0\1\54\14\0\1\101\20\0"+
    "\21\102\1\0\3\102\16\0\1\103\20\0\11\20\1\0"+
    "\6\20\1\61\1\54\1\61\3\0\1\54\32\0\1\104"+
    "\2\0\21\105\1\0\3\105\5\0\20\105\1\106\1\54"+
    "\1\106\2\105\1\0\1\54\6\0\1\107\26\0\21\70"+
    "\2\0\7\70\11\0\1\110\20\0\21\104\2\0\7\104"+
    "\4\0\1\111\36\0\1\112\25\0\1\113\32\0\1\114"+
    "\32\0\1\115\32\0\1\116\27\0\1\117\25\0\1\120"+
    "\40\0\1\121\32\0\1\122\32\0\1\123\32\0\1\124"+
    "\32\0\1\125\25\0\1\126\36\0\1\127\23\0\1\130"+
    "\40\0\1\131\16\0\1\132\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1768];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\4\1\2\11\21\1\1\0\1\1\1\0"+
    "\6\1\1\0\5\1\2\11\1\0\10\1\2\11\1\1"+
    "\1\0\3\1\3\0\1\11\17\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  WordListLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 27: break;
          case 2: 
            { yybegin(LISTBODY); return WordListTypes.LISTNAME;
            } 
            // fall through
          case 28: break;
          case 3: 
            { yybegin(BODY); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 29: break;
          case 4: 
            { yybegin(INCLUDE); return WordListTypes.INCLUDE;
            } 
            // fall through
          case 30: break;
          case 5: 
            { yybegin(DEFAULT); return WordListTypes.DEFAULT;
            } 
            // fall through
          case 31: break;
          case 6: 
            { yybegin(BODY); return WordListTypes.VALUE;
            } 
            // fall through
          case 32: break;
          case 7: 
            { yybegin(BODY_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 33: break;
          case 8: 
            { yybegin(LISTBODY); return WordListTypes.VALUE;
            } 
            // fall through
          case 34: break;
          case 9: 
            { yybegin(LISTBODY_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 35: break;
          case 10: 
            { yybegin(SUBLISTBODY); return WordListTypes.VALUE;
            } 
            // fall through
          case 36: break;
          case 11: 
            { yybegin(SUBLISTBODY_VALUE); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 37: break;
          case 12: 
            { yybegin(BODY_VALUE); return WordListTypes.SEPARATOR;
            } 
            // fall through
          case 38: break;
          case 13: 
            { yybegin(LISTINCLUDE); return WordListTypes.LISTNAME;
            } 
            // fall through
          case 39: break;
          case 14: 
            { yybegin(LISTBODY); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 15: 
            { yybegin(LISTBODY_VALUE); return WordListTypes.SEPARATOR;
            } 
            // fall through
          case 41: break;
          case 16: 
            { yybegin(LISTINCLUDE); return WordListTypes.INCLUDE;
            } 
            // fall through
          case 42: break;
          case 17: 
            { yybegin(LISTDEFAULT); return WordListTypes.DEFAULT;
            } 
            // fall through
          case 43: break;
          case 18: 
            { yybegin(BODY); return WordListTypes.COMMENT;
            } 
            // fall through
          case 44: break;
          case 19: 
            { yybegin(SUBLISTBODY); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 20: 
            { yybegin(BODY); return WordListTypes.FILENAME;
            } 
            // fall through
          case 46: break;
          case 21: 
            { yybegin(DEFAULT); return WordListTypes.KEY;
            } 
            // fall through
          case 47: break;
          case 22: 
            { yybegin(LISTDEFAULT); return WordListTypes.KEY;
            } 
            // fall through
          case 48: break;
          case 23: 
            { yybegin(LISTBODY); return WordListTypes.COMMENT;
            } 
            // fall through
          case 49: break;
          case 24: 
            { yybegin(LISTITEM); return WordListTypes.KEY;
            } 
            // fall through
          case 50: break;
          case 25: 
            { yybegin(LISTITEM); return WordListTypes.INDENT;
            } 
            // fall through
          case 51: break;
          case 26: 
            { yybegin(BODY); return WordListTypes.HEADER;
            } 
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
